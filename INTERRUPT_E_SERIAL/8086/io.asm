;   FUNDACAO UNIVERSITARIA REGIONAL DE BLUMENAU - FURB
;     DISCIPLINA: ARQUITETURA DE COMPUTADORES II
;               SEMESTRE: 2016/2
; ACADEMICOS: DIOVANI BERNARDI DA MOTTA, FELIPE CORSO E 
;            GABRIEL DOS SANTOS RAITHZ   


.MODEL	SMALL
; INICIO DO MAPEAMENTO DAS REGIOES DE MEMORIAS USADAS COMO I/O (INPUT/OUTPUT) DE DADOS PARA OS PERIFERICOS
IO0  EQU  0000H
IO1  EQU  0200H
IO2  EQU  0400H
IO3  EQU  0600H
IO4  EQU  0800H
IO5  EQU  0A00H
IO6  EQU  0C00H
IO7  EQU  0E00H
IO8  EQU  1000H
IO9  EQU  1200H
IO10 EQU  1400H
IO11 EQU  1600H
IO12 EQU  1800H
IO13 EQU  1A00H
IO14 EQU  1C00H
IO15 EQU  1E00H

; MAPEAMENTO DAS REGIOES DE MEMORIAS USADAS PARA O CONTROLE DA COMUNICAÇÃO USART/SERIAL
ADR_TIMER_DATA0   EQU  (IO3 + 00H)
ADR_TIMER_DATA1   EQU  (IO3 + 02H)
ADR_TIMER_DATA2   EQU  (IO3 + 04H)
ADR_TIMER_CONTROL EQU  (IO3 + 06H)

TIMER_COUNTER0	EQU 00H
TIMER_COUNTER1	EQU 40H
TIMER_COUNTER2	EQU 80H

TIMER_LATCH	  EQU 00H
TIMER_LSB	  EQU 10H
TIMER_MSB	  EQU 20H
TIMER_LSB_MSB 	  EQU 30H

TIMER_MODE0	EQU 00H
TIMER_MODE1	EQU 02H
TIMER_MODE2	EQU 04H
TIMER_MODE3	EQU 06H
TIMER_MODE4	EQU 08H
TIMER_MODE5	EQU 09H
TIMER_BCD	EQU 01H

; MACRO QUE TEM COMO RESPONSABILIDADE INICIALIZAR O BEEP USADO PELO DESPERTADOR
MACRO_INICIALIZA_8253_TIMER0 MACRO HIGH,LOW
   PUSHF
   PUSH AX
   PUSH DX
   
   MOV AL,36H
   MOV DX, ADR_TIMER_CONTROL
   OUT DX,AL

   MOV AL,LOW
   MOV DX, ADR_TIMER_DATA0
   OUT DX,AL

   MOV AL,HIGH
   MOV DX, ADR_TIMER_DATA0
   OUT DX,AL
   
   POP DX
   POP AX
   POPF
ENDM

; 8251A USART RESOURCES

ADR_USART_DATA EQU  (IO6 + 00H) ;ONDE VOCE VAI MANDAR E RECEBER DADOS DO 8251
ADR_USART_CMD  EQU  (IO6 + 02H) ;É O LOCAL ONDE VOCE VAI ESCREVER PARA PROGRAMAR O 8251
ADR_USART_STAT EQU  (IO6 + 02H)  ;RETORNA O STATUS SE UM CARACTER FOI DIGITADO

;CODIFICACAO NECESSARIAS PARA EXIBIÇÃO DOS VALORES CONTABILIZADOS NO RELOGIO E QUE SERÃO ENVIADOS PARA O TERMINAL
ZERO = 10111111B 
ONE = 10000110B 
TWO = 11011011B 
THREE = 11001111B 
FOUR = 11100110B 
FIVE = 11101101B 
SIX = 11111101B 
SEVEN = 10000111B 
EIGHT = 11111111B 
NINE = 11101111B 


.8086
.CODE
   ORG 0008H
   PONTEIRO_TRATADOR_INTERRUPCAO DB 4 DUP(?) ; PONTEIRO PARA INTERRUPCAO
   ;APONTA PARA UMA ROTINA CHAMADA A CADA 1 SEGUNDO VIA HARDWARE INTERRUPT
   ;OBSERVE NO 8086 O PINO NMI, ELE ESTA RECEBENDO UM PULSO A CADA UM SEGUNDO, FORÇANDO A INTERRUPÇÃO

   ORG 0400H ;RESERVADO PARA VETOR DE INTERRUPCOES

.STARTUP
	MOV AX,0000
	MOV DS,AX
	
	; TRIGGER DE DISPARO PARA A INTERRUPCAO QUE OCORRERA A CADA 1 SEGUNDO
	MOV WORD PTR PONTEIRO_TRATADOR_INTERRUPCAO, OFFSET INTERRUPT_ONE_SECOND
	MOV WORD PTR PONTEIRO_TRATADOR_INTERRUPCAO + 2, SEG INTERRUPT_ONE_SECOND 

	MOV AX,@DATA
	MOV DS,AX
	MOV AX,@STACK
	MOV SS,AX

	CALL INICIALIZA_8251 

	CALL ZERA
	
	JMP DESPERTADOR

LOOP_INI: JMP LOOP_INI	

; ROTINA QUE SERÁ EXECUTADA A CADA UM SEGUNDO  E É INVOCADA AUTOMATICAMENTE PELO 8086 QUANDO HOUVER UMA INTERRUPCAO
INTERRUPT_ONE_SECOND:
	PUSHF 
	PUSH AX ; EMPILHA OS REGISTRADORES
	PUSH DX
	CMP LEU_SEGUNDOS, 01H ; VERIFICA SE ELE LEU UM SEGUNDO
	JNE REST
	CALL ATUALIZAR_RELOGIO ; INVOCA A ROTINA DE ATUALIZAÇÃO DO VALOR CONTIDO NO RELOGIO
	CALL VERIFICA_DESPERTADOR ; VERIFICAR SE O HORARIO CORRENTE É O MESMO ARMAZENADO PELA ALARME
	REST:
	POP DX
	POP AX
	POPF
	IRET

; ROTINA QUE IRA INICIALIZAR TODOS OS DISPLAYS COM  VALOR ZERO	
ZERA:
    ; ESCREVE O VALOR ZERO PARA O DISPLAY CONECTADO NA PORTA IO0 
    MOV DX, IO0
    MOV AL, ZERO
    OUT DX, AL
    ; ESCREVE O VALOR ZERO PARA O DISPLAY CONECTADO NA PORTA IO1
    MOV DX, IO1
    MOV AL, ZERO
    OUT DX, AL
    ; ESCREVE O VALOR ZERO PARA O DISPLAY CONECTADO NA PORTA IO2
    MOV DX, IO2
    MOV AL, ZERO
    OUT DX, AL
    ; ESCREVE O VALOR ZERO PARA O DISPLAY CONECTADO NA PORTA IO3
    MOV DX, IO3
    MOV AL, ZERO
    OUT DX, AL
    ; ESCREVE O VALOR ZERO PARA O DISPLAY CONECTADO NA PORTA IO4
    MOV DX, IO4
    MOV AL, ZERO
    OUT DX, AL
    ; ESCREVE O VALOR ZERO PARA O DISPLAY CONECTADO NA PORTA IO5
    MOV DX, IO5
    MOV AL, ZERO
    OUT DX, AL
    
    RET

; ROTINA QUE SERÁ USADA PARA EFETUAR A ATUALIZACAO DO RELOGIO    
ATUALIZAR_RELOGIO:
    CMP HOR_DEZ,32H
    JNE CONTINUA
    CMP HOR_UNI,34H
    JE ZERA_HOR_DEZ

; ROTINA QUE EFETUA O PROCESSO DE CONTROLE PARA VERIFICAR OS LIMITES HORARIOS (23:59:59)    
CONTINUA:
    CMP HOR_UNI,39H  
    JE ZERA_HOR_UNI
    CMP MIN_DEZ,36H ; VERIFICAR SE FOI ATINGIDO O VALOR MAXIMO PERMITIDO PARA A DEZENA DE MINUTO (6)
    JE ZERA_MIN_DEZ
    CMP MIN_UNI,39H ; VERIFICAR SE FOI ATINGIDO O VALOR MAXIMO PERMITIDO PARA A UNIDADE DE MINUTO (9)
    JE ZERA_MIN_UNI
    CMP SEG_DEZ,36H ; VERIFICAR SE FOI ATINGIDO O VALOR MAXIMO PERMITIDO PARA A DEZENA DE SEGUNDO (6)
    JE ZERA_SEG_DEZ
    CMP SEG_UNI,39H ; VERIFICAR SE FOI ATINGIDO O VALOR MAXIMO PERMITIDO PARA A UNIDADE DE MINUTO (9)
    JE ZERA_SEG_UNI
    INC SEG_UNI ; INCREMENTA O VALOR DOS SEGUNDO
    JMP SEG_UNI_SHOW ; EXIBE O VALOR NO DISPLAY DO RELOGIO

; ROTINAS RESPONSAVEIS POR ZERAR O VALOR CONTIDO NOS DISPLAYS    
ZERA_SEG_UNI:
    MOV SEG_UNI,30H ; REPRESENTA O VALOR ZERO EM HEXA
    INC SEG_DEZ ; ESTOURA A UNIDADE DE SEGUNDO E INCREMENTA A DEZENA DE SEGUNDO
    JMP SEG_DEZ_SHOW
ZERA_SEG_DEZ:
    MOV SEG_DEZ,30H ; REPRESENTA O VALOR ZERO EM HEXA
    INC MIN_UNI ; ESTOURA A DEZENA DE SEGUNDO E INCREMENTA A UNIDADE DE SEGUNDO
    JMP MIN_UNI_SHOW
ZERA_MIN_UNI:
    MOV MIN_UNI,30H ; REPRESENTA O VALOR ZERO EM HEXA
    INC MIN_DEZ 
    JMP MIN_DEZ_SHOW
ZERA_MIN_DEZ:
    MOV MIN_DEZ,30H ; REPRESENTA O VALOR ZERO EM HEXA
    INC HOR_UNI
    JMP HOR_UNI_SHOW
ZERA_HOR_UNI:
    MOV HOR_UNI,30H ; REPRESENTA O VALOR ZERO EM HEXA
    INC HOR_DEZ
    JMP HOR_DEZ_SHOW 
ZERA_HOR_DEZ:
    MOV HOR_DEZ,30H ; ZERA O VALOR DE TODOS OS DISPLAYS
    MOV HOR_UNI,30H ; REPRESENTA O VALOR ZERO EM HEXA
    MOV MIN_DEZ,30H ; REPRESENTA O VALOR ZERO EM HEXA
    MOV MIN_UNI,30H ; REPRESENTA O VALOR ZERO EM HEXA
    MOV SEG_DEZ,30H ; REPRESENTA O VALOR ZERO EM HEXA
    MOV SEG_UNI,30H ; REPRESENTA O VALOR ZERO EM HEXA
    JMP ZERA

;ROTINA VERIFICANDO QUE NÚMERO DA UNIDADE DOS SEGUNDOS DEVE SER EXIBIDA
SEG_UNI_SHOW:
    CMP SEG_UNI, 30H ; COMPARAR SE É ZERO EM HEXA
    JE SEG_UNI_0
    CMP SEG_UNI, 31H ; COMPARAR SE É ZERO EM HEXA 
    JE SEG_UNI_1
    CMP SEG_UNI, 32H ; COMPARAR SE É DOIS EM HEXA
    JE SEG_UNI_2
    CMP SEG_UNI, 33H ; COMPARAR SE É TRES EM HEXA
    JE SEG_UNI_3
    CMP SEG_UNI, 34H ; COMPARAR SE É QUATRO EM HEXA
    JE SEG_UNI_4
    CMP SEG_UNI, 35H ; COMPARAR SE É CINCO EM HEXA
    JE SEG_UNI_5
    CMP SEG_UNI, 36H ; COMPARAR SE É SEIS EM HEXA
    JE SEG_UNI_6
    CMP SEG_UNI, 37H ; COMPARAR SE É SETE EM HEXA
    JE SEG_UNI_7
    CMP SEG_UNI, 38H ; COMPARAR SE É OITO EM HEXA
    JE SEG_UNI_8
    CMP SEG_UNI, 39H ; COMPARAR SE É NOVE EM HEXA
    JE SEG_UNI_9

;ROTINA VERIFICANDO QUE NÚMERO DA DEZENA DOS SEGUNDOS DEVE SER EXIBIDA	
SEG_DEZ_SHOW:
    CMP SEG_DEZ, 30H
    JE SEG_DEZ_0
    CMP SEG_DEZ, 31H 
    JE SEG_DEZ_1
    CMP SEG_DEZ, 32H 
    JE SEG_DEZ_2
    CMP SEG_DEZ, 33H 
    JE SEG_DEZ_3
    CMP SEG_DEZ, 34H
    JE SEG_DEZ_4
    CMP SEG_DEZ, 35H 
    JE SEG_DEZ_5

;ROTINA VERIFICANDO QUE NÚMERO DA UNIDADE DOS MINUTOS DEVE SER EXIBIDA
MIN_UNI_SHOW:
    CMP MIN_UNI, 30H
    JE MIN_UNI_0
    CMP MIN_UNI, 31H 
    JE MIN_UNI_1
    CMP MIN_UNI, 32H 
    JE MIN_UNI_2
    CMP MIN_UNI, 33H 
    JE MIN_UNI_3
    CMP MIN_UNI, 34H
    JE MIN_UNI_4
    CMP MIN_UNI, 35H 
    JE MIN_UNI_5
    CMP MIN_UNI, 36H 
    JE MIN_UNI_6
    CMP MIN_UNI, 37H 
    JE MIN_UNI_7
    CMP MIN_UNI, 38H 
    JE MIN_UNI_8
    CMP MIN_UNI, 39H
    JE MIN_UNI_9

;ROTINA VERIFICANDO QUE NÚMERO DA DEZENA DOS MINUTOS DEVE SER EXIBIDA	
MIN_DEZ_SHOW:
    CMP MIN_DEZ, 30H
    JE MIN_DEZ_0
    CMP MIN_DEZ, 31H 
    JE MIN_DEZ_1
    CMP MIN_DEZ, 32H 
    JE MIN_DEZ_2
    CMP MIN_DEZ, 33H 
    JE MIN_DEZ_3
    CMP MIN_DEZ, 34H
    JE MIN_DEZ_4
    CMP MIN_DEZ, 35H 
    JE MIN_DEZ_5

;ROTINA VERIFICANDO QUE NÚMERO DA UNIDADE DAS HORAS DEVE SER EXIBIDA
HOR_UNI_SHOW:
    CMP HOR_UNI, 30H
    JE HOR_UNI_0
    CMP HOR_UNI, 31H 
    JE HOR_UNI_1
    CMP HOR_UNI, 32H 
    JE HOR_UNI_2
    CMP HOR_UNI, 33H 
    JE HOR_UNI_3
    CMP HOR_UNI, 34H
    JE HOR_UNI_4
    CMP HOR_UNI, 35H 
    JE HOR_UNI_5
    CMP HOR_UNI, 36H 
    JE HOR_UNI_6
    CMP HOR_UNI, 37H 
    JE HOR_UNI_7
    CMP HOR_UNI, 38H 
    JE HOR_UNI_8
    CMP HOR_UNI, 39H
    JE HOR_UNI_9

;ROTINA VERIFICANDO QUE NÚMERO DA DEZENA DAS HORAS DEVE SER EXIBIDA
HOR_DEZ_SHOW:
    CMP HOR_DEZ, 30H
    JE HOR_DEZ_0
    CMP HOR_DEZ, 31H 
    JE HOR_DEZ_1
    CMP HOR_DEZ, 32H 
    JE HOR_DEZ_2
    
;ROTINA MOSTRANDO DÍGITOS DA UNIDADE DOS SEGUNDOS 0-9 
SEG_UNI_0: ; ESCREVE O VALOR ZERO NO DISPLAY CONECTADO AO IO0 (HH:MM:S[S])
    MOV DX, IO0
    MOV AL, ZERO
    OUT DX, AL
    RET
SEG_UNI_1: ; ESCREVE O VALOR UM NO DISPLAY CONECTADO AO IO0 (HH:MM:S[S])
    MOV DX, IO0
    MOV AL, ONE
    OUT DX, AL
    RET
SEG_UNI_2: ; ESCREVE O VALOR DOIS NO DISPLAY CONECTADO AO IO0 (HH:MM:S[S])
    MOV DX, IO0
    MOV AL, TWO
    OUT DX, AL
    RET
SEG_UNI_3: ; ESCREVE O VALOR TRES NO DISPLAY CONECTADO AO IO0 (HH:MM:S[S])
    MOV DX, IO0
    MOV AL, THREE
    OUT DX, AL
    RET
SEG_UNI_4: ; ESCREVE O VALOR QUATRO NO DISPLAY CONECTADO AO IO0 (HH:MM:S[S]) 
    MOV DX, IO0
    MOV AL, FOUR
    OUT DX, AL
    RET
SEG_UNI_5: ; ESCREVE O VALOR CINCO NO DISPLAY CONECTADO AO IO0 (HH:MM:S[S])
    MOV DX, IO0
    MOV AL, FIVE
    OUT DX, AL
    RET
SEG_UNI_6: ; ESCREVE O VALOR SEIS NO DISPLAY CONECTADO AO IO0 (HH:MM:S[S])
    MOV DX, IO0
    MOV AL, SIX
    OUT DX, AL
    RET
SEG_UNI_7: ; ESCREVE O VALOR SETE NO DISPLAY CONECTADO AO IO0 (HH:MM:S[S])
    MOV DX, IO0
    MOV AL, SEVEN
    OUT DX, AL
    RET
SEG_UNI_8: ; ESCREVE O VALOR OITO NO DISPLAY CONECTADO AO IO0 (HH:MM:S[S])
    MOV DX, IO0
    MOV AL, EIGHT
    OUT DX, AL
    RET
SEG_UNI_9: ; ESCREVE O VALOR NOVE NO DISPLAY CONECTADO AO IO0 (HH:MM:S[S])
    MOV DX, IO0
    MOV AL, NINE
    OUT DX, AL
    RET

;ROTINA QUE MOSTRANDO DÍGITOS DA DEZENA DOS SEGUNDOS 0-6
SEG_DEZ_0: ; ESCREVE O VALOR ZERO NO DISPLAY CONECTADO AO IO1 (HH:MM:[S]S)
    MOV DX, IO1
    MOV AL, ZERO
    OUT DX, AL
    JMP SEG_UNI_SHOW
SEG_DEZ_1: ; ESCREVE O VALOR UM NO DISPLAY CONECTADO AO IO1 (HH:MM:[S]S)
    MOV DX, IO1
    MOV AL, ONE
    OUT DX, AL
    JMP SEG_UNI_SHOW
SEG_DEZ_2: ; ESCREVE O VALOR DOIS NO DISPLAY CONECTADO AO IO2 (HH:MM:[S]S)
    MOV DX, IO1
    MOV AL, TWO
    OUT DX, AL
    JMP SEG_UNI_SHOW
SEG_DEZ_3: ; ESCREVE O VALOR TRES NO DISPLAY CONECTADO AO IO1 (HH:MM:[S]S)
    MOV DX, IO1
    MOV AL, THREE
    OUT DX, AL
    JMP SEG_UNI_SHOW
SEG_DEZ_4: ; ESCREVE O VALOR QUATRO NO DISPLAY CONECTADO AO IO1 (HH:MM:[S]S)
    MOV DX, IO1
    MOV AL, FOUR
    OUT DX, AL
    JMP SEG_UNI_SHOW
SEG_DEZ_5: ; ESCREVE O VALOR CINCO NO DISPLAY CONECTADO AO IO1 (HH:MM:[S]S)
    MOV DX, IO1
    MOV AL, FIVE
    OUT DX, AL
    JMP SEG_UNI_SHOW
SEG_DEZ_6: ; ESCREVE O VALOR SEIS NO DISPLAY CONECTADO AO IO1 (HH:MM:[S]S)
    MOV DX, IO1
    MOV AL, SIX
    OUT DX, AL
    JMP SEG_UNI_SHOW

;ROTINA QUE MOSTRANDO DÍGITOS DA UNIDADE DOS MINUTOS 0-9 
MIN_UNI_0: ; ESCREVE O VALOR ZERO NO DISPLAY CONECTADO AO IO2 (HH:M[M]:SS)
    MOV DX, IO2
    MOV AL, ZERO
    OUT DX, AL
    JMP SEG_DEZ_SHOW
MIN_UNI_1: ; ESCREVE O VALOR UM NO DISPLAY CONECTADO AO IO2 (HH:M[M]:SS)
    MOV DX, IO2
    MOV AL, ONE
    OUT DX, AL
    JMP SEG_DEZ_SHOW
MIN_UNI_2: ; ESCREVE O VALOR DOIS NO DISPLAY CONECTADO AO IO2 (HH:M[M]:SS)
    MOV DX, IO2
    MOV AL, TWO
    OUT DX, AL
    JMP SEG_DEZ_SHOW
MIN_UNI_3: ; ESCREVE O VALOR TRES NO DISPLAY CONECTADO AO IO2 (HH:M[M]:SS)
    MOV DX, IO2
    MOV AL, THREE
    OUT DX, AL
    JMP SEG_DEZ_SHOW
MIN_UNI_4: ; ESCREVE O VALOR QUATRO NO DISPLAY CONECTADO AO IO2 (HH:M[M]:SS)
    MOV DX, IO2
    MOV AL, FOUR
    OUT DX, AL
    JMP SEG_DEZ_SHOW
MIN_UNI_5: ; ESCREVE O VALOR CINCO NO DISPLAY CONECTADO AO IO2 (HH:M[M]:SS)
    MOV DX, IO2
    MOV AL, FIVE
    OUT DX, AL
    JMP SEG_DEZ_SHOW
MIN_UNI_6: ; ESCREVE O VALOR SEIS NO DISPLAY CONECTADO AO IO2 (HH:M[M]:SS)
    MOV DX, IO2
    MOV AL, SIX
    OUT DX, AL
    JMP SEG_DEZ_SHOW
MIN_UNI_7: ; ESCREVE O VALOR SETE NO DISPLAY CONECTADO AO IO2 (HH:M[M]:SS)
    MOV DX, IO2
    MOV AL, SEVEN
    OUT DX, AL
    JMP SEG_DEZ_SHOW
MIN_UNI_8: ; ESCREVE O VALOR OITO NO DISPLAY CONECTADO AO IO2 (HH:M[M]:SS)
    MOV DX, IO2
    MOV AL, EIGHT
    OUT DX, AL
    JMP SEG_DEZ_SHOW
MIN_UNI_9: ; ESCREVE O VALOR NOVE NO DISPLAY CONECTADO AO IO2 (HH:M[M]:SS)
    MOV DX, IO2
    MOV AL, NINE
    OUT DX, AL
    JMP SEG_DEZ_SHOW

;ROTINA QUE MOSTRANDO DÍGITOS DA DEZENA DOS MINUTOS 0-6
MIN_DEZ_0:  ; ESCREVE O VALOR ZERO NO DISPLAY CONECTADO AO IO3 (HH:[M]M:SS)
    MOV DX, IO3
    MOV AL, ZERO
    OUT DX, AL
    JMP MIN_UNI_SHOW
MIN_DEZ_1: ; ESCREVE O VALOR UM NO DISPLAY CONECTADO AO IO3 (HH:[M]M:SS)
    MOV DX, IO3
    MOV AL, ONE
    OUT DX, AL
    JMP MIN_UNI_SHOW
MIN_DEZ_2: ; ESCREVE O VALOR DOIS NO DISPLAY CONECTADO AO IO3 (HH:[M]M:SS)
    MOV DX, IO3
    MOV AL, TWO
    OUT DX, AL
    JMP MIN_UNI_SHOW
MIN_DEZ_3: ; ESCREVE O VALOR TRES NO DISPLAY CONECTADO AO IO3 (HH:[M]M:SS)
    MOV DX, IO3
    MOV AL, THREE
    OUT DX, AL
    JMP MIN_UNI_SHOW
MIN_DEZ_4: ; ESCREVE O VALOR QUATRO NO DISPLAY CONECTADO AO IO3 (HH:[M]M:SS)
    MOV DX, IO3
    MOV AL, FOUR
    OUT DX, AL
    JMP MIN_UNI_SHOW
MIN_DEZ_5: ; ESCREVE O VALOR CINCO NO DISPLAY CONECTADO AO IO3 (HH:[M]M:SS)
    MOV DX, IO3
    MOV AL, FIVE
    OUT DX, AL
    JMP MIN_UNI_SHOW
MIN_DEZ_6: ; ESCREVE O VALOR SEIS NO DISPLAY CONECTADO AO IO3 (HH:[M]M:SS)
    MOV DX, IO3
    MOV AL, SIX
    OUT DX, AL
    JMP MIN_UNI_SHOW

;ROTINA QUE MOSTRANDO DÍGITOS DA UNIDADE DAS HORAS 0-9 
HOR_UNI_0: ; ESCREVE O VALOR ZERO NO DISPLAY CONECTADO AO IO4 (H[H]:MM:SS)
    MOV DX, IO4
    MOV AL, ZERO
    OUT DX, AL
    JMP MIN_DEZ_SHOW
HOR_UNI_1:; ESCREVE O VALOR UM NO DISPLAY CONECTADO AO IO4 (H[H]:MM:SS)
    MOV DX, IO4
    MOV AL, ONE
    OUT DX, AL
    JMP MIN_DEZ_SHOW
HOR_UNI_2: ; ESCREVE O VALOR DOIS NO DISPLAY CONECTADO AO IO4 (H[H]:MM:SS)
    MOV DX, IO4
    MOV AL, TWO
    OUT DX, AL
    JMP MIN_DEZ_SHOW
HOR_UNI_3: ; ESCREVE O VALOR TRES NO DISPLAY CONECTADO AO IO4 (H[H]:MM:SS)
    MOV DX, IO4
    MOV AL, THREE
    OUT DX, AL
    JMP MIN_DEZ_SHOW
HOR_UNI_4: ; ESCREVE O VALOR QUATRO NO DISPLAY CONECTADO AO IO4 (H[H]:MM:SS)
    MOV DX, IO4
    MOV AL, FOUR
    OUT DX, AL
    JMP MIN_DEZ_SHOW
HOR_UNI_5: ; ESCREVE O VALOR CINCO NO DISPLAY CONECTADO AO IO4 (H[H]:MM:SS)
    MOV DX, IO4
    MOV AL, FIVE
    OUT DX, AL
    JMP MIN_DEZ_SHOW
HOR_UNI_6: ; ESCREVE O VALOR SEIS NO DISPLAY CONECTADO AO IO4 (H[H]:MM:SS)
    MOV DX, IO4
    MOV AL, SIX
    OUT DX, AL
    JMP MIN_DEZ_SHOW
HOR_UNI_7: ; ESCREVE O VALOR SETE NO DISPLAY CONECTADO AO IO4 (H[H]:MM:SS)
    MOV DX, IO4
    MOV AL, SEVEN
    OUT DX, AL
    JMP MIN_DEZ_SHOW
HOR_UNI_8: ; ESCREVE O VALOR OITO NO DISPLAY CONECTADO AO IO4 (H[H]:MM:SS)
    MOV DX, IO4
    MOV AL, EIGHT
    OUT DX, AL
    JMP MIN_DEZ_SHOW
HOR_UNI_9: ; ESCREVE O VALOR NOVE NO DISPLAY CONECTADO AO IO4 (H[H]:MM:SS)
    MOV DX, IO4
    MOV AL, NINE
    OUT DX, AL
    JMP MIN_DEZ_SHOW   

;ROTINA QUE MOSTRANDO DÍGITOS DA DEZENA DAS HORAS 0-6
HOR_DEZ_0: ; ESCREVE O VALOR ZERO NO DISPLAY CONECTADO AO IO5 ([H]H:MM:SS)
    MOV DX, IO5
    MOV AL, ZERO
    OUT DX, AL
    JMP HOR_UNI_SHOW
HOR_DEZ_1: ; ESCREVE O VALOR UM NO DISPLAY CONECTADO AO IO5 ([H]H:MM:SS)
    MOV DX, IO5
    MOV AL, ONE
    OUT DX, AL
    JMP HOR_UNI_SHOW
HOR_DEZ_2: ; ESCREVE O VALOR DOIS NO DISPLAY CONECTADO AO IO5 ([H]H:MM:SS)
    MOV DX, IO5
    MOV AL, TWO
    OUT DX, AL
    JMP HOR_UNI_SHOW
HOR_DEZ_3: ; ESCREVE O VALOR TRES NO DISPLAY CONECTADO AO IO5 ([H]H:MM:SS)
    MOV DX, IO5
    MOV AL, THREE
    OUT DX, AL
    JMP HOR_UNI_SHOW
HOR_DEZ_4: ; ESCREVE O VALOR QUATRO NO DISPLAY CONECTADO AO IO5 ([H]H:MM:SS)
    MOV DX, IO5
    MOV AL, FOUR
    OUT DX, AL
    JMP HOR_UNI_SHOW
HOR_DEZ_5: ; ESCREVE O VALOR CINCO NO DISPLAY CONECTADO AO IO5 ([H]H:MM:SS)
    MOV DX, IO5
    MOV AL, FIVE
    OUT DX, AL
    JMP HOR_UNI_SHOW
HOR_DEZ_6: ; ESCREVE O VALOR SEIS NO DISPLAY CONECTADO AO IO5 ([H]H:MM:SS)
    MOV DX, IO5
    MOV AL, SIX
    OUT DX, AL
    JMP HOR_UNI_SHOW  
    
JMP ZERA

; ROTINA RESPONSAVEL POR CONFIGURAR A INICIALIZACAO DO TERMINAL
INICIALIZA_8251:                                     
   MOV AL,0
   MOV DX, ADR_USART_CMD ;INFORMA QUE SERÁ ENVIAO UM COMANDOPARA O TERMINAL
   OUT DX,AL
   OUT DX,AL
   OUT DX,AL
   MOV AL,40H
   OUT DX,AL
   MOV AL,4DH
   OUT DX,AL
   MOV AL,37H
   OUT DX,AL
   RET

RECEBE_CARACTER:
   PUSHF
   PUSH DX
   
;ROTINA QUE AGUARDA O RECEBIMENTO DE UM CARACTERE   
AGUARDA_CARACTER:
   MOV DX, ADR_USART_STAT ; INICIA A COMUNICACAO COM SERIAL
   IN  AL,DX
   TEST AL,2
   JZ AGUARDA_CARACTER
   MOV DX, ADR_USART_DATA ;RECEBE O DADO LIDO NO TERMINAL
   IN AL,DX
   SHR AL,1

; ROTINA EXECUTADA AFIM DE "PRENDER" A EXECUCAO QUANDO UM DADO NAO E RECEBIDO NA SERIAL
NAO_RECEBIDO:
   POP DX
   POPF
   RET
   
; ROTINA QUE PREPARA UM CARACTERE PARA SER ENVIADO   
MANDA_CARACTER:
   PUSHF
   PUSH DX
   PUSH AX  ; SALVA AL   
   
BUSY:
   MOV DX, ADR_USART_STAT ; INICIA A COMUNICACAO COM SERIAL
   IN  AL,DX
   TEST AL,1
   JZ BUSY
   MOV DX, ADR_USART_DATA ; RECEBE O DADO LIDO NO TERMINAL 
   POP AX  ; RESTAURA AL
   OUT DX,AL
   POP DX
   POPF
   RET

; ROTINA QUE RECEBE PROCESSA A LEITURA DE UM CARACTER ENVIADO PARA O DESPERTADOR
ECOAR_LEITURA_DESPERTADOR:
   CALL RECEBE_CARACTER

; ROTINA RESPONSAVEL POR VERIFICAR SE FORAM INFORMADOS OS VALORES QUE SERAO USADOS PELO DESPERTADOR   
DESPERTADOR:
   CMP LEU_HORAS, 00H 
   JE LER_HORA_DESPERTADOR ; EXIBE A MENSAGEM NO TERMINAL E SOLICITA A HORA
   CMP LEU_MINUTOS, 00H
   JE LER_MINUTO_DESPERTADOR ; EXIBE A MENSAGEM NO TERMINAL E SOLICITA OS MINUTO
   CMP LEU_SEGUNDOS, 00H
   JE LER_SEGUNDO_DESPERTADOR ; EXIBE A MENSAGEM NO TERMINAL E SOLICITA OS SEGUNDOSS
   CALL MANDA_CARACTER	

; ROTINA RESPONSAVEL POR LER O VALOR DA HORA DO DESPETADOR   
LER_HORA_DESPERTADOR:
   CALL MOSTRAR_MSG_HORAS ; MOSTRAR A MENSAGEM NO TERMINAL SOLICITANDO A HORA
   CMP DIGITOU_DEZENA, 00H ; VERIFICA SE O USUARIO INFORMOU A HORA(DEZENA) PARA O DESPERTADOR
   JE LER_DEZ_H ; MANDA LER A DEZENA DA HORA
   JMP LER_UNI_H ; LE A UNIDADE INFORMADA PARA A HORA

; ROTINA RESPONSAVEL POR LER O VALOR DA HORA DO DESPETADOR   
LER_MINUTO_DESPERTADOR:
   CALL MOSTRAR_MSG_MINUTOS ; MOSTRAR A MENSAGEM NO TERMINAL SOLICITANDO OS MINUTOS
   CMP DIGITOU_DEZENA, 00H ; VERIFICA SE O USUARIO INFORMOU A MINUTO(DEZENA) PARA O DESPERTADOR
   JE LER_DEZ_M ; MANDA LER A DEZENA
   JMP LER_UNI_M ;MANDA LER A UNIDADES

; ROTINA RESPONSAVEL POR LER O VALOR DOS SEGUNDOS DO DESPETADOR   
LER_SEGUNDO_DESPERTADOR:
   CALL MOSTRAR_MSG_SEGUNDOS ; MOSTRAR A MENSAGEM NO TERMINAL SOLICITANDO OS SEGUNDOS
   CMP DIGITOU_DEZENA, 00H ; VERIFICA SE O USUARIO INFORMOU O SEGUNDO(DEZENA) PARA O DESPERTADOR
   JE LER_DEZ_S ; MANDA LER A DEZENA
   JMP LER_UNI_S ;MANDA LER A UNIDADESS
   
;ROTINA RESPONSAVEL LE OS VALORES REFERENTE A UNIDADE DA HORA
LER_UNI_H:
   MOV HOR_UNI_DES, AL ; MOVE O VALOR CONTIDO NO REGISTRADOR AL PARA A VARIAVEL
   MOV DIGITOU_DEZENA, 00H ; ZERA A VARIAVEL DE CONTROLE INFORMANDO QUE AINDA NÃO  FOI LIDO A DDEZENA DA UNIDADE
   CALL MANDA_CARACTER ; ENVIA O CARACTERE PARA O TERMINAL
   MOV AX, 13; ENTER
   CALL MANDA_CARACTER ; ENVIA O CARACTERE PARA O TERMINAL
   INC LEU_HORAS ; INCREMENTA A VARIAVEL RESPONSAVEL POR DETERMINAR SE FOI EFETUADO A LEITURA DE UM HORARIO
   JMP DESPERTADOR ; INVOCA OS PROCEDIMENTOS DO DESPERTADOR

;ROTINA RESPONSAVEL LE OS VALORES REFERENTE A DEZENA DA HORA   
LER_DEZ_H: 
   MOV HOR_DEZ_DES, AL ; MOVE O VALOR CONTIDO NO REGISTRADOR AL PARA A VARIAVEL
   INC DIGITOU_DEZENA  ; INCREMENTA A VARIAVEL RESPONSAVEL POR DETERMINAR SE FOI EFETUADO A LEITURA DE UM HORARIO
   CALL MANDA_CARACTER  ENVIA O CARACTERE PARA O TERMINAL
   JMP ECOAR_LEITURA_DESPERTADOR ; ENVIA MENSAGEM AO TERMINAL INFORMANDO O HORARIO ATIVADO PARA O DESPERTADOR

;ROTINA RESPONSAVEL LE OS VALORES REFERENTE A UNIDADE DO MINUTO     
LER_UNI_M:
   MOV MIN_UNI_DES, AL ; MOVE O VALOR CONTIDO NO REGISTRADOR AL PARA A VARIAVEL
   MOV DIGITOU_DEZENA, 00H ; COMPARA SE AINDA NAO FOI LIDO A DEZENA PARA A FORMACAO DDOS MINUTOS
   CALL MANDA_CARACTER ; ENVIA O CARACTERE PARA O TERMINAL.
   MOV AX, 13; ENTER
   CALL MANDA_CARACTER ;ENVIA O CARACTERE PARA O TERMINAL.
   INC LEU_MINUTOS ; INCREMENTA A VARIAVEL DE CONTROLE INFORMANDO QUE FORAM LIDOS OS MINUTOS
   JMP DESPERTADOR ;INVOCA A ROTINA RESPONSAVEL POR CAPTURAR OS DADOS CONTIDOS NO TERMINAL

;ROTINA RESPONSAVEL LE OS VALORES REFERENTE A DEZENA DO MINUTO        
LER_DEZ_M: 
   MOV MIN_DEZ_DES, AL ; MOVE O VALOR CONTIDO NO REGISTRADOR AL PARA A VARIAVEL
   INC DIGITOU_DEZENA ; INCREMENTA A VARIAVEL DE CONTROLE QUE DIZ QUE FOI EFETUADA A LEITURA DA DEZENA DOS MINUTOS
   CALL MANDA_CARACTER ; ENVIA PARA O TERMINAL
   JMP ECOAR_LEITURA_DESPERTADOR ; ENVIA MENSAGEM AO TERMINAL INFORMANDO O HORARIO ATIVADO PARA O DESPERTADOR
   
;ROTINA RESPONSAVEL LE OS VALORES REFERENTE A UNIDADE DO SEGUNDO        
LER_UNI_S:
   MOV SEG_UNI_DES, AL ; MOVE O VALOR CONTIDO NO REGISTRADOR AL PARA A VARIAVEL
   MOV DIGITOU_DEZENA, 00H ;VERIFICA SE NAO FOI RECEBIDO O VALOR REFERENE A DEZENA 
   CALL MANDA_CARACTER ; ENVIA PARA O TERMINAL
   MOV AX, 13 ; ENTER
   CALL MANDA_CARACTER  ; ENVIA PARA O TERMINAL
   INC LEU_SEGUNDOS ; INCREMENTA A VARIAVEL DE CONTROLE PARA INFORMAR QUE FORAM LIDOS OS SEGUNDOS
   JMP MOSTRAR_DESPERTADOR ;INVOCA A ROTINA RESPONSAVEL POR CAPTURAR OS DADOS CONTIDOS NO TERMINAL

;ROTINA RESPONSAVEL LE OS VALORES REFERENTE A DEZENA DO SEGUNDO   
LER_DEZ_S: 
   MOV SEG_DEZ_DES, AL ; MOVE O VALOR CONTIDO NO REGISTRADOR AL PARA A VARIAVEL
   INC DIGITOU_DEZENA ;INCREMENTA A VARIAVEL DE CONTROLE INFORMANDO QUE FOI RECEBIDO O VALOR CORRESPONDENTE A DEZENA
   CALL MANDA_CARACTER ; ENVIA PARA O TERMINAL
   JMP ECOAR_LEITURA_DESPERTADOR ; ENVIA MENSAGEM AO TERMINAL INFORMANDO O HORARIO ATIVADO PARA O DESPERTADOR
   
MOSTRAR_BX:
   MOV AL, [BX]
   CMP AL, 0
   JE FIM_MOSTRAR_BX
   CALL MANDA_CARACTER
   INC BX
   JMP MOSTRAR_BX    
   
FIM_MOSTRAR_BX:
   RET

; ROTINA RESPONSAVEL POR ESCREVER NO CONSOLE AS MENSAGENS SOLICITANDO A ENTRADA DE DADOS   
MOSTRAR_MSG_HORAS:
   CMP MOSTROU_MSG_H, 00H
   JNE RETORNO
   LEA BX, MSG_DESP_H
   CALL MOSTRAR_BX
   INC MOSTROU_MSG_H
   JMP ECOAR_LEITURA_DESPERTADOR
MOSTRAR_MSG_MINUTOS:
   CMP MOSTROU_MSG_M, 00H
   JNE RETORNO
   LEA BX, MSG_DESP_M
   CALL MOSTRAR_BX
   INC MOSTROU_MSG_M
   JMP ECOAR_LEITURA_DESPERTADOR

MOSTRAR_MSG_SEGUNDOS:
   CMP MOSTROU_MSG_S, 00H
   JNE RETORNO
   LEA BX, MSG_DESP_S
   CALL MOSTRAR_BX
   INC MOSTROU_MSG_S
   JMP ECOAR_LEITURA_DESPERTADOR

RETORNO:
   RET
   
MOSTRAR_DESPERTADOR:
   LEA BX, MSG_DESPERTADOR
   CALL MOSTRAR_BX
   
   MOV AL, HOR_DEZ_DES
   CALL MANDA_CARACTER
   MOV AL, HOR_UNI_DES
   CALL MANDA_CARACTER
   
   LEA BX, DOIS_PONTOS
   CALL MOSTRAR_BX
   
   MOV AL, MIN_DEZ_DES
   CALL MANDA_CARACTER
   MOV AL, MIN_UNI_DES
   CALL MANDA_CARACTER
   
   LEA BX, DOIS_PONTOS
   CALL MOSTRAR_BX
   
   MOV AL, SEG_DEZ_DES
   CALL MANDA_CARACTER
   MOV AL, SEG_UNI_DES
   CALL MANDA_CARACTER
   
   JMP LOOP_INI
   
VERIFICA_DESPERTADOR:
   MOV AL, HOR_DEZ
   CMP AL, HOR_DEZ_DES
   JE COMP_HOR_UNI
   RET
COMP_HOR_UNI:
   MOV AL, HOR_UNI
   CMP AL, HOR_UNI_DES
   JE COMP_MIN_DEZ
   RET
COMP_MIN_DEZ:
   MOV AL, MIN_DEZ
   CMP AL, MIN_DEZ_DES
   JE COMP_MIN_UNI
   RET
COMP_MIN_UNI:
   MOV AL, MIN_UNI
   CMP AL, MIN_UNI_DES
   JE COMP_SEG_DEZ
   RET
COMP_SEG_DEZ:
   MOV AL, SEG_DEZ
   CMP AL, SEG_DEZ_DES
   JE COMP_SEG_UNI
   RET
COMP_SEG_UNI:
   MOV AL, SEG_UNI
   CMP AL, SEG_UNI_DES
   JE DESPERTAR
   RET
DESPERTAR:
   LEA BX, MSG_DESPERTADOR
   CALL MOSTRAR_BX
   MACRO_INICIALIZA_8253_TIMER0 00H,0BFH 
   RET

;MEUS DADOS
.DATA
    SEG_UNI DB 30H
    SEG_DEZ DB 30H
    MIN_UNI DB 30H
    MIN_DEZ DB 30H
    HOR_UNI DB 30H
    HOR_DEZ DB 30H
    
    MSG_INI_H  DB "DIGITE AS HORAS INICIAIS",13,10,0
    MSG_INI_M  DB "DIGITE OS MINUTOS INICIAIS",13,10,0
    MSG_INI_S  DB "DIGITE OS SEGUNDOS INICIAIS",13,10,0
    MSG_DESP_H DB "DIGITE AS HORAS PARA O DESPERTADOR",13,10,0
    MSG_DESP_M DB "DIGITE OS MINUTOS PARA O DESPERTADOR",13,10,0
    MSG_DESP_S DB "DIGITE OS SEGUNDOS PARA O DESPERTADOR",13,10,0
    MSG_DESPERTADOR DB "O DESPERTADOR IRA TOCAR AS ",0
    DOIS_PONTOS DB ":",0
    
    SEG_UNI_DES DB 00H
    SEG_DEZ_DES DB 00H
    MIN_UNI_DES DB 00H
    MIN_DEZ_DES DB 00H
    HOR_UNI_DES DB 00H
    HOR_DEZ_DES DB 00H
    
    DIGITOU_DEZENA DB 00H
    LEU_HORAS DB 00H
    LEU_MINUTOS DB 00H
    LEU_SEGUNDOS DB 00H
    MOSTROU_MSG_H DB 00H
    MOSTROU_MSG_M DB 00H
    MOSTROU_MSG_S DB 00H
    
    
    CONTADOR_SEGUNDOS DB 0
    NOTA DB 0
    TEMPO_NOTA DB 0
    
;MILHA PILHA
.STACK
MINHA_PILHA DW 128 DUP(0) 

END