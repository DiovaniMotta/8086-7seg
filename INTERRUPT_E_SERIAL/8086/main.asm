; FUNDACAO UNIVERSITARIA REGIONAL DE BLUMENAU - FURB
; DISCIPLINA: ARQUITETURA DE COMPUTADORES II
; ACADEMICOS: DIOVANI BERNARDI DA MOTTA E GABRIEL RAITHZ
; SEMESTRE: 2016/2

.MODEL	SMALL

IO0  EQU  0000h
IO1  EQU  0200h
IO2  EQU  0400h
IO3  EQU  0600h
IO4  EQU  0800h
IO5  EQU  0A00h
IO6  EQU  0C00h
IO7  EQU  0E00h
IO8  EQU  1000h
IO9  EQU  1200h
IO10 EQU  1400h
IO11 EQU  1600h
IO12 EQU  1800h
IO13 EQU  1A00h
IO14 EQU  1C00h
IO15 EQU  1E00h


; 8251A USART 

ADR_USART_DATA EQU  (IO6 + 00h)
;ONDE VOCE VAI MANDAR E RECEBER DADOS DO 8251

ADR_USART_CMD  EQU  (IO6 + 02h)
;É O LOCAL ONDE VOCE VAI ESCREVER PARA PROGRAMAR O 8251

ADR_USART_STAT EQU  (IO6 + 02h)
;RETORNA O STATUS SE UM CARACTER FOI DIGITADO
;RETORNA O STATUS SE POSSO TRANSMITIR CARACTER PARA O TERMINAL

.8086
.CODE

ORG 0008H
PONTEIRO_TRATADOR_INTERRUPCAO DB 4 DUP(?) ; PONTEIRO PARA INTERRUPCAO
;APONTA PARA UMA ROTINA CHAMADA A CADA 1 SEGUNDO VIA HARDWARE INTERRUPT
;OBSERVE NO 8086 O PINO NMI, ELE ESTA RECEBENDO UM PULSO A CADA UM SEGUNDO, FORÇANDO A INTERRUPÇÃO

ORG 400H

INICIALIZA_8251:                                     
   MOV AL,0
   MOV DX, ADR_USART_CMD
   OUT DX,AL
   OUT DX,AL
   OUT DX,AL
   MOV AL,40H
   OUT DX,AL
   MOV AL,4DH
   OUT DX,AL
   MOV AL,37H
   OUT DX,AL
   RET

RECEBE_CARACTER:
   PUSHF
   PUSH DX
AGUARDA_CARACTER:
   MOV DX, ADR_USART_STAT
   IN  AL,DX
   TEST AL,2
   JZ AGUARDA_CARACTER
   MOV DX, ADR_USART_DATA
   IN AL,DX
   SHR AL,1
NAO_RECEBIDO:
   POP DX
   POPF
   RET

MANDA_CARACTER:
   PUSHF
   PUSH DX
   PUSH AX  ; SALVA AL   
BUSY:
   MOV DX, ADR_USART_STAT
   IN  AL,DX
   TEST AL,1
   JZ BUSY
   MOV DX, ADR_USART_DATA
   POP AX  ; RESTAURA AL
   OUT DX,AL
   POP DX
   POPF
   RET 
   
     
.startup

	MOV AX,0000
	MOV DS,AX
	
	MOV WORD PTR PONTEIRO_TRATADOR_INTERRUPCAO, OFFSET INTERRUPT_ONE_SECOND
	MOV WORD PTR PONTEIRO_TRATADOR_INTERRUPCAO + 2, SEG INTERRUPT_ONE_SECOND 

	MOV AX,@DATA
	MOV DS,AX
	MOV AX,@STACK
	MOV SS,AX

	CALL INICIALIZA_8251        

	LEA BX, MENSAGEM


INICIALIZA_TODOS_OS_ZEROS:
      ;MOV DX, IO0
      ;MOV AL, ZERO 
     ; OUT DX, AL 
      
      ;MOV DX, IO1
      ;MOV AL, ZERO
      ;OUT DX, AL 
      
      ;MOV DX, IO2
      ;MOV AL, ZERO
      ;OUT DX, AL 
      
      ;MOV DX, IO3
      ;MOV AL, ZERO
      ;OUT DX, AL 
      
      ;MOV DX, IO4
      ;MOV AL, ZERO
      ;OUT DX, AL 
      
      ;MOV DX, IO5
      ;MOV AL, ZERO
      ;OUT DX, AL 
	
	
PROCURA_0:
	MOV AL, [BX]
	CMP AL, 0
	JE ECOAR
	CALL MANDA_CARACTER
	INC BX
	JMP PROCURA_0

ECOAR:
	CALL RECEBE_CARACTER
	CALL MANDA_CARACTER
	JMP ECOAR


INTERRUPT_ONE_SECOND:
	PUSHF 
	PUSH AX
	PUSH DX
	MOV AL,"."
	CALL MANDA_CARACTER
	POP DX
	POP AX
	MOV AX, @DATA
	MOV DS, AX
	MOV ES, AX
	JMP MOSTRANDO
	POPF
	IRET

MOSTRANDO: 
	;LE HORA RETORNA DH SEGUNDOS
	MOV AH,2CH
	INT 21H
	MOV AH,0
	MOV AL,DH 
	MOV BL,10
	;DIV BL
	;MOV DIGITO_DEZ, AL
	;MOV DIGITO_UNI, AH
	INC DIGITO 
	;IMPRIME DEZ SS
	;MOV AL,DIGITO_DEZ
	;MOV DIGITO,AL
	;MOV LINHA, 5
	;MOV COLUNA, 40
	MOV DX,IO0
	CALL IMPRIME_DIGITO 

	; IMPRIME UNID SS 
        ;MOV AL,DIGITO_UNI
	;MOV DIGITO,AL
        ;MOV LINHA, 5
        ;MOV COLUNA, 60
	;MOV DX,IO5
	;CALL IMPRIME_DIGITO 

	; CL TEM SEGUNDOS 
        ;MOV AH,0
	;MOV AL,CL 
	;MOV BL,10
	;DIV BL
	;MOV DIGITO_DEZ, AL
	;MOV DIGITO_UNI, AH

	; IMPRIME DEZ MM
	;MOV AL,DIGITO_DEZ
	;MOV DIGITO,AL
	;MOV LINHA, 5
	;MOV COLUNA, 0
	;MOV DX,IO0
	;CALL IMPRIME_DIGITO 

	; IMPRIME UNID MM 
	;MOV AL,DIGITO_UNI
	;MOV DIGITO,AL
	;MOV LINHA, 5
	;MOV COLUNA, 20
	;MOV DX,IO3
	;CALL IMPRIME_DIGITO 

	;JMP MOSTRANDO

	;;MOV AX, 4C00H 
	;;INT 21H 

IMPRIME_DIGITO:
CMP DIGITO,0
JE IMP_ZERO
CMP DIGITO,1
JE IMP_UM
CMP DIGITO,2
JE IMP_DOIS
CMP DIGITO,3
JE IMP_TRES
CMP DIGITO,4
JE IMP_QUATRO
CMP DIGITO ,5
JE IMP_CINCO
CMP DIGITO,6
JE IMP_SEIS
CMP DIGITO,7
JE IMP_SETE
CMP DIGITO,8
JE IMP_OITO
CMP DIGITO,9
JE IMP_NOVE


IMP_ZERO:
MOV AL,ZERO
OUT DX, AL       
JMP IMPRIMINDO
IMP_UM:
MOV AL,UM
OUT DX, AL       
JMP IMPRIMINDO
IMP_DOIS:
MOV AL,DOIS
OUT DX, AL       
JMP IMPRIMINDO
IMP_TRES:
MOV AL,TRES
OUT DX, AL       
JMP IMPRIMINDO
IMP_QUATRO:
MOV AL,QUATRO
OUT DX, AL 
     
IMP_CINCO:
MOV AL,CINCO
OUT DX, AL       
JMP IMPRIMINDO
IMP_SEIS:
MOV AL,SEIS
OUT DX, AL       
JMP IMPRIMINDO
IMP_SETE:
MOV AL, SEVEN
OUT DX, AL       
JMP IMPRIMINDO
IMP_OITO:
MOV AL, OITO
OUT DX, AL       
JMP IMPRIMINDO
IMP_NOVE:
MOV AL,NOVE
OUT DX, AL 
      
JMP IMPRIMINDO

IMPRIMINDO:
; POSICIONA CURSOR
MOV AH,2
MOV BH,0
MOV DH, LINHA
MOV DL, COLUNA 
;INT 10H 

PROCURA_FIM:
MOV DL,DS:[SI]
CMP DL,0
JE FIM_IMPRESSAO
CMP DL,10
JE PULA_LINHA
MOV AH,2 
INT 21H 
INC SI
JMP PROCURA_FIM

PULA_LINHA:
INC BYTE PTR LINHA
INC SI
JMP IMPRIMINDO

FIM_IMPRESSAO:
RET 	
	
.DATA

MENSAGEM DB "TUDO QUE VOCE DIGITAR VOU ECOAR",13,10,0

LINHA DB ?
COLUNA DB ?
DIGITO DB 0
DIGITO_UNI DB ?
DIGITO_DEZ DB ?
 
ZERO DB 0111111b
UM DB 0000110b
DOIS DB 1011011b
TRES DB 1001111b
QUATRO DB 1100110b
CINCO DB 1101101b
SEIS DB 1111101b
SEVEN DB 1110000b
OITO DB 1111111b
NOVE DB 1100111b
 
.STACK

MINHA_PILHA DW 128 DUP(?)

END 
